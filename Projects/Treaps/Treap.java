/**
 * Name: Annanya Jain
 * Pledge: I pledge my honor that I have abided by the Stevens Honor System
 */

import java.util.Random;
import java.util.Stack;

/**
 * Treap class containing data fields : Random priorityGenerator and Node<E> root.
 * @param <E>
 */
public class Treap<E extends Comparable<E>> {
    private Random priorityGenerator;
    private Node<E> root;

    // Getter functions.
    public Node<E> getRoot(){
        return root;
    }

    public Random getPriorityGenerator() {
        return priorityGenerator;
    }

    /**
     * Inner class called Node<E>
     * Contains Data fields namely: data (key for search), priority (random heap priority), Node<E> left, Node<E> right
     * @param <E>
     */
    private static class Node<E> {
        public E data;
        public int priority;
        public Node<E> left;
        public Node<E> right;


        /**
         * Constructor for Node class which creates a new node with the given data and priority.
         * The pointers to the child nodes are null. If data is null, it throws an exception.
         * @param data
         * @param priority
         */
        public Node(E data, int priority) {
            if (data == null) {
                throw new IllegalArgumentException();
            }
            this.data = data;
            this.priority = priority;
            this.left = null;
            this.right = null;
        }

        /**
         * rotateRight() is a method in the inner class Node which performs a right rotation.
         * It is used by the Treap class to restore the heap property.
         * @return the new root of the rotated tree.
         */

        // Referred the Data Structures Book by ELLIOT B. KOFFMAN for rotateRight
        public Node<E> rotateRight() {
            if (this.left == null) {
                return this;
            }
            Node<E> temp = this.left;
            this.left = temp.right;
            temp.right = this;
            return temp;
        }

        /**
         * rotateLeft() is a method in the inner class Node which performs a left rotation.
         * It is used by the Treap class to restore the heap property.
         * @return the new root of the rotated tree.
         */

        public Node<E> rotateLeft() {
            if (this.right == null) {
                return this;
            }
            Node<E> temp = this.right;
            this.right = temp.left;
            temp.left = this;
            return temp;
        }
    }

    /**
     * Constructor for Treap class which creates an empty treap.
     * It initializes priority generator using new Random().
     */

    public Treap() {
        root = null;
        priorityGenerator = new Random();
    }

    /**
     * Constructor for Treap class which creates an empty treap.
     * It initializes priority generator using new Random(seed).
     * @param seed
     */
    public Treap(long seed) {
        root = null;
        priorityGenerator = new Random(seed);
    }

    /**
     * add(E key) is a Treap class method which returns True if the node to be added is successfully added to the Treap.
     * It returns false if already a node containing the given key exists in the Treap. It does not modify the Treap.
     * It initializes priority to a random priority which is generated by priorityGenerator.
     * This function calls the helper function called add(E key, int priority) which performs all the work.
     * @param key
     */
    public boolean add(E key) {
        int priority = priorityGenerator.nextInt();
        return add(key, priority);
    }

    /**
     * Helper function add(E key, int priority) first creates a node called newNode that contains the given key and priority.
     * It inserts the newNode according to a Binary Search Tree(BST) by comparing the key values.
     * It also creates a Stack<Node<E>> called stack.
     * Each node in the path from the root until the spot where the newNode will be inserted is stored in the stack using push().
     * It calls another helper function reheap(stack, newNode) which restores the max heap of the Treap by comparing the priorities.
     * @param key
     * @param priority
     * @return true if newNode is added according to Treap i.e. maintaining BST and max heap property, otherwise returns false.
     */
    public boolean add(E key, int priority) {
        // returns false if the key is null.
        if(key == null){
            return false;
        }
        // Creates an empty stack.
        Stack<Node<E>> stack = new Stack<>();
        // Creates a new node called newNode containing key and priority.
        Node<E> newNode = new Node<>(key, priority);
        Node<E> current = root;

        // If root is null, the newNode becomes the root of the tree.
        if (root == null) {
            root = newNode;
            return true;
        }
        // push() is used to store each node in the path from root until the spot where newNode is inserted, in the stack.
        stack.push(current);
        while (true) {
            int compare = key.compareTo(current.data);
               // If newNode's key is less than the current node's key, newNode is added as the left child of current.
            if (compare < 0) {
                if (current.left == null) {
                    current.left = newNode;
                    break;
                }
                current = current.left;
                stack.push(current);

                // If newNode's key is more than the current node's key, newNode is added as the right child of current.
            } else if (compare > 0) {
                if (current.right == null) {
                    current.right = newNode;
                    break;
                }
                current = current.right;
                stack.push(current);

                // If newNode's key is equal to the current node's key, it is not added to the Treap and returns false.
            } else {
                return false;
            }
        }
        // After adding newNode by maintaining BST property of the Treap, it calls the reheap to restore max heap.
        reheap(stack, newNode);
        return true;
    }

    /**
     * The helper function reheap restores the max heap of the Treap by comparing the priorities of the nodes.
     * If the priority of the parent node is less than the priority of the new node, new node is bubbled up.
     * This is done so that node's priority are according to the max heap (highest priority node at the top).
     * To bubble up the nodes, rotateRight() and rotateLeft() methods of the Node<E> class are used.
     * @param stack
     * @param newNode
     */
    private void reheap(Stack<Node<E>> stack, Node<E> newNode) {
        // if newNode to be added is null, there is no modification in the treap.
        if (newNode == null) {
            return;
        }
        while (!stack.isEmpty()) {
            // pop() is used to remove the top most node from the stack and returns it.
            Node<E> parent = stack.pop();
            // It first checks if the parent's priority is less than the newNode's priority.
            if (parent.priority < newNode.priority) {
                // If the newNode is the left child of the parent, it rotatesRight.
                if (parent.data.compareTo(newNode.data) > 0) {
                    newNode = parent.rotateRight();
                    // If the newNode is the right child of the parent, it rotatesLeft.
                } else {
                    newNode = parent.rotateLeft();
                }
                if (!stack.isEmpty()) {
                    if (stack.peek().left == parent) {
                        stack.peek().left = newNode;
                    } else {
                        stack.peek().right = newNode;
                    }
                } else {
                    this.root = newNode;
                }
            // If the priority of the newNode matches with any node's priority, it does not add the newNode.
            } else {
                break;
            }
        }
    }

    /**
     * delete(E key) method deletes the node with the given key from the treap and returns true.
     * If either the key was not found in the treap, or the given key is null, the method does not modify the treap and returns false.
     * Calls the helper function delete(root, key) to delete the node of the given key, while maintaining the treap properties.
     * @param key
     */

    public boolean delete(E key) {
        if (key == null) {
            return false;
        }
        if(!find(key)){
            return false;
        }
        root = delete(root, key);
        return true;
    }

    /**
     * delete(Node<E> root, E key) is a helper function which deletes the node with the given key without destroying the treap.
     * Using the comparators, it finds the key to be deleted in the treap.
     * Once it finds the key, it uses the rotation methods and trickle it down until it becomes a leaf and then removes it.
     * While tricking down, the max heap property is also not destroyed by making use of rotations appropriately.
     * It also calls other helper functions min(), deleteMin() and deleteMin(Node x).
     * @param root
     * @param key
     */

    // Referred the method "private Node delete(Node x, Key key)" from the BSTree.java file.
    // I modified it to rotateRight or rotateLeft depending on the higher priority node for the case when the node to be deleted has two children.
     private Node<E> delete(Node<E> root, E key) {
        // if the root is null, it returns null as there is no key that can be deleted.
        if (root == null) {
            return null;
        }
        // if the given key is null, it throws an exception.
        if (key == null) {
            throw new IllegalArgumentException("Key to be deleted is null!");
        }
        int compare = key.compareTo(root.data);

        if (compare < 0) {
            root.left = delete(root.left, key);
        } else if (compare > 0) {
            root.right = delete(root.right, key);
        } else {
            // If the node to be deleted is at the leaf of the treap, it gets deleted.
            if(root.left == null && root.right == null){
                return null;
            }
            // If the node to be deleted has only right child.
            if (root.left == null && root.right != null) {
                return root.right;

            // If the node to be deleted has only left child.
            } else if (root.right == null && root.left != null) {
                return root.left;

            // If the node to be deleted has both left and right child.
            } else {
                // If the left child's priority is more than right child's priority, it is rotated right.
                if (root.left.priority > root.right.priority) {
                    root = root.rotateRight();
                    return delete(root, key);
                }
                // If the right child's priority is more than left child's priority, it is rotated left.
                if (root.left.priority < root.right.priority) {
                    root = root.rotateLeft();
                    return delete(root, key);
                }
            }

            Node temp = root;
            root = min(root.right);
            root.right = deleteMin(temp.right);
            root.left = temp.left;
        }
        return root;
    }

    // Referred the min(), deleteMin() and deleteMin(Node x) from BSTree.java file from the lecture.
    public Node min(Node x) {
        if (x.left  == null) return x;
        else return min(x.left);
    }

    public void deleteMin(){
        root = deleteMin(root);
    }

    private Node deleteMin(Node x){
        if(x.left == null) return x.right;
        x.left = deleteMin(x.left);
        return x;
    }

    /**
     * find(E key) finds a node with the given key in the treap. It calls find(root,key) which is a helper function.
     * @param key
     * @return true if it finds it and false otherwise.
     */

    public boolean find(E key) {
        return find(root, key);
    }

    /**
     * find(Node<E> root, E key) is a helper function which iterates left and right subtrees.
     * It compares the root's key with the given key and iterates left or right subtrees, until it finds.
     * @param root
     * @param key
     * @return true if the key is found in the treap, otherwise false.
     */
    private boolean find(Node<E> root, E key) {
        // if the given key is null, it returns false.
        if (key == null)
            return false;
        if (root != null && key.compareTo(root.data) == 0)
            return true;
        while (root != null) {
            int compare = key.compareTo(root.data);
            // if given key is less than the root's key, it traverses left.
            if (compare < 0) {
                root = root.left;
            // if given key is more than the root's key, it traverses right.
            } else if (compare > 0) {
                root = root.right;
            // Once the given key is equal to the root's key, it returns true and the key is found.
            } else {
                return true;
            }
        }
        // If key is not found, it returns false.
        return false;
    }

    /**
     * toString method carries out a preorder traversal of the tree and returns a representation of the nodes as a string.
     * If the left or right child does not exist, it is represented by null.
     * @param current
     * @param level
     */

    // Referred the code for toString in BinaryTree.java from the lecture and modified it to print key and priority value.
    private String toString(Node<E> current, int level) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < level; i++)
            s.append("  ");
        if (current == null)
            s.append("null\n");
        else {
            s.append("(key=" + current.data.toString() + ", priority=" + current.priority + ")" + "\n");
            s.append(toString(current.left, level + 1));
            s.append(toString(current.right, level + 1));
        }
        return s.toString();
    }

    public String toString() {
        return toString(root, 0);
    }
}